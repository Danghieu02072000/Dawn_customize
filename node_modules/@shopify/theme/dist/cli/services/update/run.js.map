{"version":3,"file":"run.js","sourceRoot":"","sources":["../../../../src/cli/services/update/run.ts"],"names":[],"mappings":"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","sourcesContent":["import {checkScript} from './check.js'\nimport {fetchStoreThemes} from '../../utilities/theme-selector/fetch.js'\nimport {Filter, filterThemes} from '../../utilities/theme-selector/filter.js'\nimport {renderSuccess, renderTasks} from '@shopify/cli-kit/node/ui'\nimport {fetchTheme, upgradeTheme} from '@shopify/cli-kit/node/themes/themes-api'\nimport {readFile} from '@shopify/cli-kit/node/fs'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport {AdminSession} from '@shopify/cli-kit/node/session'\nimport {sleep} from '@shopify/cli-kit/node/system'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {codeEditorUrl, themeEditorUrl, themePreviewUrl} from '@shopify/cli-kit/node/themes/theme-urls'\nimport {Theme} from '@shopify/cli-kit/node/themes/models/theme'\n\ninterface Context {\n  get theme(): Theme\n  set theme(value: Theme)\n  get scriptContent(): string | undefined\n  set scriptContent(value: string | undefined)\n}\n\ninterface Options {\n  script?: string\n  'from-theme': string\n  'to-theme': string\n}\n\n// 5 minutes\nconst UPDATER_TIMEOUT = 5 * 60 * 1000\n\nexport async function run(session: AdminSession, options: Options) {\n  const ctx = await renderTasks<Context>([\n    task(`Checking your theme update script`, (ctx) => check(ctx, options)),\n    task(`Starting your theme update`, (ctx) => triggerUpdater(ctx, session, options)),\n    task(`Updating your theme`, (ctx) => waitForUpdater(ctx, session)),\n  ])\n\n  renderSuccess({\n    body: 'Your theme has been updated.',\n    nextSteps: [\n      [\n        {\n          link: {\n            label: 'Explore the updated theme in the code editor',\n            url: codeEditorUrl(ctx.theme, session),\n          },\n        },\n      ],\n      [\n        {\n          link: {\n            label: 'Explore the updated theme in the theme editor',\n            url: themeEditorUrl(ctx.theme, session),\n          },\n        },\n      ],\n      [\n        {\n          link: {\n            label: 'Preview the updated theme',\n            url: themePreviewUrl(ctx.theme, session),\n          },\n        },\n      ],\n    ],\n  })\n}\n\nasync function check(ctx: Context, options: Options) {\n  const {script} = options\n\n  if (!script) {\n    return\n  }\n\n  await sleep(1)\n  await checkScript(script)\n\n  ctx.scriptContent = await readFile(joinPath(script))\n}\n\nasync function triggerUpdater(ctx: Context, session: AdminSession, options: Options) {\n  const {'from-theme': fromTheme, 'to-theme': toTheme} = options\n  const store = session.storeFqdn\n\n  const themes = await fetchStoreThemes(session)\n\n  const fromThemeId = findThemeByIdentifier(store, themes, fromTheme).id\n  const toThemeId = findThemeByIdentifier(store, themes, toTheme).id\n\n  // This is a false positive, as `renderTasks` performs tasks sequentially.\n  // eslint-disable-next-line require-atomic-updates\n  ctx.theme = await triggerUpgradeAPI(session, ctx.scriptContent, fromThemeId, toThemeId)\n}\n\nasync function waitForUpdater(ctx: Context, session: AdminSession) {\n  const startTime = Date.now()\n\n  /**\n   * Generally, it's a good practice to take full advantage of the parallelization\n   * benefits of async/await.\n   *\n   * However, in the context of polling an API, each iteration must wait for the\n   * response, before the next polling.\n   */\n  // eslint-disable-next-line no-await-in-loop\n  while (await isUpdaterIsProgress(ctx, session, startTime)) {\n    // retry\n  }\n}\n\nasync function isUpdaterIsProgress(ctx: Context, session: AdminSession, startTime: number) {\n  const theme = await fetchTheme(ctx.theme.id, session)\n\n  if (!theme) {\n    throw new AbortError(\n      'The `update_extension.json` script could not be executed due to a runtime issue.',\n      'Please check the `update_extension.json` script and retry.',\n    )\n  }\n\n  const elapsedTime = Date.now() - startTime\n\n  if (theme.processing && elapsedTime >= UPDATER_TIMEOUT) {\n    throw new AbortError(\n      'The `update_extension.json` script could not be executed due to a timeout issue.',\n      'Please check the `update_extension.json` script and retry.',\n    )\n  }\n\n  // Sleep for 3 seconds before polling again\n  await sleep(3)\n\n  return theme.processing\n}\n\n/**\n * Trigger the Updater API\n *\n * @param session - current admin session.\n * @param _updateExtension - `update_extension.json` script content.\n * @param fromTheme - The theme ID or name of the theme at the previous version.\n * @param toTheme - The theme ID or name of the theme at the target version.\n *\n * @returns the reference to the updated theme.\n */\nasync function triggerUpgradeAPI(\n  session: AdminSession,\n  _updateExtension: string | undefined,\n  fromTheme: number,\n  toTheme: number,\n): Promise<Theme> {\n  try {\n    const theme = await upgradeTheme({\n      fromTheme,\n      toTheme,\n      script: _updateExtension,\n      session,\n    })\n\n    if (!theme) {\n      throw new AbortError('Updated theme could not be created')\n    }\n\n    return theme\n  } catch (err) {\n    if (!(err instanceof AbortError)) {\n      throw err\n    }\n\n    throw new AbortError(\n      ['The update process could not be triggered.', `Cause: ${err.message}`],\n      'Please check the `update_extension.json` script and retry.',\n    )\n  }\n}\n\nfunction task(title: string, taskFn: (ctx: Context) => Promise<void>) {\n  return {title, task: taskFn}\n}\n\nfunction findThemeByIdentifier(store: string, themes: Theme[], theme: string) {\n  return filterThemes(store, themes, new Filter({theme})).at(0)!\n}\n"]}