{"version":3,"file":"update_extension_schema_v1.js","sourceRoot":"","sources":["../../../../../src/cli/services/update/schemas/update_extension_schema_v1.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * IMPORTANT: Do not modify this file.\n *\n * This file is generated by the `pnpm run schema:generate` command and should\n * not be modified.\n *\n * Any changes to the schemas for `update_extension` files require the creation\n * of a new schema file at `https://github.com/Shopify/theme-liquid-docs`.\n *\n * This is necessary because Shopify must support legacy `update_extension.json`\n * scripts. Once a new schema is published, it must be supported forever without\n * breaking backward compatibility.\n */\nimport {zod as z} from '@shopify/cli-kit/node/schema'\n\nexport const schemaUrlV1 =\n  'https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/schemas/update/update_extension_schema_v1.json'\n\nexport const schemaV1 = z\n  .object({\n    $schema: z.string().describe('The URL for the JSON schema version used for validation and execution.'),\n    theme_name: z.string().describe('The name of the theme to which the update extension script applies.'),\n    theme_version: z.string().describe('The version of the theme to which the update extension script applies.'),\n    operations: z\n      .array(\n        z\n          .object({\n            id: z.string(),\n            actions: z\n              .array(\n                z.union([\n                  z\n                    .object({\n                      action: z.literal('move').describe('The action type.'),\n                      file: z\n                        .any()\n                        .superRefine((x, ctx) => {\n                          const schemas = [\n                            z\n                              .string()\n                              .describe(\n                                'The relative path of the file, within the theme folder, to move the key-value pair.',\n                              ),\n                            z.object({\n                              source: z.string().describe('The relative path of source file.'),\n                              target: z.string().describe('The relative path of target file.'),\n                            }),\n                          ]\n                          const errors = schemas.reduce(\n                            (errors: z.ZodError[], schema) =>\n                              ((result) => ('error' in result ? [...errors, result.error] : errors))(\n                                schema.safeParse(x),\n                              ),\n                            [],\n                          )\n                          if (schemas.length - errors.length !== 1) {\n                            ctx.addIssue({\n                              path: ctx.path,\n                              code: 'invalid_union',\n                              unionErrors: errors,\n                              message: 'Invalid input: Should pass single schema',\n                            })\n                          }\n                        })\n                        .describe(\n                          \"The file referenced in this step can be either a string, if the source and target are the same, or an object with 'source' and 'target' properties.\",\n                        ),\n                      from_key: z.string().describe('The key to move from.'),\n                      to_key: z.string().describe('The key to move to.'),\n                    })\n                    .strict(),\n                  z\n                    .object({\n                      action: z.literal('copy').describe('The action type.'),\n                      file: z\n                        .any()\n                        .superRefine((x, ctx) => {\n                          const schemas = [\n                            z.string().describe('The relative path of the file to copy the key-value pair.'),\n                            z.object({\n                              source: z.string().describe('The relative path of source file.'),\n                              target: z.string().describe('The relative path of target file.'),\n                            }),\n                          ]\n                          const errors = schemas.reduce(\n                            (errors: z.ZodError[], schema) =>\n                              ((result) => ('error' in result ? [...errors, result.error] : errors))(\n                                schema.safeParse(x),\n                              ),\n                            [],\n                          )\n                          if (schemas.length - errors.length !== 1) {\n                            ctx.addIssue({\n                              path: ctx.path,\n                              code: 'invalid_union',\n                              unionErrors: errors,\n                              message: 'Invalid input: Should pass single schema',\n                            })\n                          }\n                        })\n                        .describe(\n                          \"The file referenced in this step can be either a string, if the source and target are the same, or an object with 'source' and 'target' properties.\",\n                        ),\n                      from_key: z.string().describe('The key to copy from.'),\n                      to_key: z.string().describe('The key to copy to.'),\n                    })\n                    .strict(),\n                  z\n                    .object({\n                      action: z.literal('add').describe('The action type.'),\n                      file: z.string().describe('The relative path of the file to add the key-value pair to.'),\n                      key: z.string().describe('The existing key to add the value to.'),\n                      value: z\n                        .any()\n                        .superRefine((x, ctx) => {\n                          const schemas = [z.record(z.any()), z.array(z.any())]\n                          const errors = schemas.reduce(\n                            (errors: z.ZodError[], schema) =>\n                              ((result) => ('error' in result ? [...errors, result.error] : errors))(\n                                schema.safeParse(x),\n                              ),\n                            [],\n                          )\n                          if (schemas.length - errors.length !== 1) {\n                            ctx.addIssue({\n                              path: ctx.path,\n                              code: 'invalid_union',\n                              unionErrors: errors,\n                              message: 'Invalid input: Should pass single schema',\n                            })\n                          }\n                        })\n                        .describe('The value to add, either as an object or an array.'),\n                    })\n                    .strict(),\n                  z\n                    .object({\n                      action: z.literal('delete').describe('The action type.'),\n                      file: z.string().describe('The relative path of the file to delete the key-value pair from.'),\n                      key: z.string().describe('The key to delete.'),\n                      value: z.string().describe('The optional value to delete in the key.').optional(),\n                    })\n                    .strict(),\n                ]),\n              )\n              .min(1),\n          })\n          .strict(),\n      )\n      .min(1)\n      .describe('An array of operations to be performed on the theme during an update.'),\n  })\n  .strict()\n"]}